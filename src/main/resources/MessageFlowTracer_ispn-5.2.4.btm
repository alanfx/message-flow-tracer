RULE putInternalEntry
CLASS org.infinispan.CacheImpl
METHOD putInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  createManagedContext();
#  traceTag("PUT" + $key);
  traceTag("PUT");
ENDRULE

RULE putInternalExit
CLASS org.infinispan.CacheImpl
METHOD putInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("PUT_exit");
  destroyManagedContext();
ENDRULE

RULE removeInternalEntry
CLASS org.infinispan.CacheImpl
METHOD removeInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  createManagedContext();
  traceTag("REMOVE");
ENDRULE

RULE removeInternalExit
CLASS org.infinispan.CacheImpl
METHOD removeInternal
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  checkpoint("REMOVE_exit");
  destroyManagedContext();
ENDRULE

RULE getEntry
CLASS org.infinispan.CacheImpl
METHOD get(java.lang.Object)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  createManagedContext();
  traceTag("GET");
ENDRULE

RULE getExit
CLASS org.infinispan.CacheImpl
METHOD get(java.lang.Object)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  checkpoint("GET_exit");
  destroyManagedContext();
ENDRULE

RULE beginTx
INTERFACE ^javax.transaction.TransactionManager
METHOD begin
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("BEGIN_TX");
ENDRULE

RULE beginTx_exit
INTERFACE ^javax.transaction.TransactionManager
METHOD begin
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE beginTx_jbossTM
CLASS ^com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction
METHOD begin
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("BEGIN_TX");
ENDRULE

RULE beginTx_jbossTM_exit
CLASS ^com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction
METHOD begin
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE commitTx
INTERFACE ^javax.transaction.TransactionManager
METHOD commit
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("COMMIT_TX");
ENDRULE

# not working when commit fails with exception
RULE commitTx_exit
INTERFACE ^javax.transaction.TransactionManager
METHOD commit
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE


RULE commitTx_jbossTM
CLASS com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction
METHOD commit
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("COMMIT_TX");
#   checkpoint("TX=" + com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.getTransaction());
ENDRULE

RULE commitTx_jbossTM_exit
CLASS com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple
METHOD commitAndDisassociate
HELPER org.jboss.qa.jdg.messageflow.Tracer
#AT LINE 1207 - does not work either
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE


RULE rollbackTx
INTERFACE ^javax.transaction.TransactionManager
METHOD rollback
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("ROLLBACK_TX");
ENDRULE

RULE rollbackTx_exit
INTERFACE ^javax.transaction.TransactionManager
METHOD rollback
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE rollbackTx_jbossTM
CLASS com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction
METHOD rollback
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
   createManagedContext();
   traceTag("ROLLBACK_TX");
#   checkpoint("TX=" + com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.getTransaction());
ENDRULE

RULE rollbackTx_jbossTM_exit
CLASS com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple
METHOD rollbackAndDisassociate
HELPER org.jboss.qa.jdg.messageflow.Tracer
#AT LINE 1267 - doesn't work either
AT EXIT
IF TRUE
DO
   destroyManagedContext();
ENDRULE

RULE lock
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD lockAndRecord
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
#  checkpoint("LOCK");
  checkpoint("LOCK " + $1);
ENDRULE

RULE lockOk
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD lockAndRecord
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF $!
DO
  checkpoint("LOCK_OK");
ENDRULE

RULE lockFail
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD lockAndRecord
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF !($!)
DO
  checkpoint("LOCK_FAIL");
ENDRULE

RULE unlock
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD unlock
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
#  checkpoint("UNLOCK ");
  checkpoint("UNLOCK " + $1);
ENDRULE

RULE unlockAll
CLASS org.infinispan.util.concurrent.locks.LockManagerImpl
METHOD unlockAll
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
#  checkpoint("UNLOCK_ALL");
  checkpoint("UNLOCK_ALL " + $1.getLockedKeys());
ENDRULE

RULE submitCallable
INTERFACE java.util.concurrent.AbstractExecutorService
METHOD submit(java.util.concurrent.Callable)
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF hasContextData()
DO
  associateData($1);
  threadHandoverStarted($1);
ENDRULE

RULE executeCallableEntry
INTERFACE ^java.util.concurrent.Callable
METHOD run
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  threadHandoverSuccess($0);
  checkpoint("Callable");
ENDRULE

RULE executeCallableExit
INTERFACE ^java.util.concurrent.Callable
METHOD run
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  threadProcessingComplete();
ENDRULE

RULE dispatchCommandMulti
CLASS org.infinispan.remoting.transport.jgroups.CommandAwareRpcDispatcher
METHOD processCalls
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  setContextMarkWithClass($1);
ENDRULE

RULE dispatchCommandSingle
CLASS org.infinispan.remoting.transport.jgroups.CommandAwareRpcDispatcher
METHOD processSingleCall
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  setContextMarkWithClass($1);
ENDRULE

RULE commandPerform
INTERFACE ^org.infinispan.commands.ReplicableCommand
METHOD perform
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  msgTagWithClass($0);
ENDRULE